import java.util.Arrays;
import java.util.Comparator;

public class SJF {

    static class Process {
        String name;
        int burstTime;
        int waitingTime;
        int turnaroundTime;

        public Process(String name, int burstTime) {
            this.name = name;
            this.burstTime = burstTime;
            this.waitingTime = 0;
            this.turnaroundTime = 0;
        }
    }

    public static void calculateTimes(Process[] processes) {
        // Sort processes by burst time (SJF)
        Arrays.sort(processes, Comparator.comparingInt(p -> p.burstTime));

        // Calculate waiting and turnaround times
        processes[0].waitingTime = 0;
        processes[0].turnaroundTime = processes[0].burstTime;

        for (int i = 1; i < processes.length; i++) {
            processes[i].waitingTime = processes[i - 1].turnaroundTime;
            processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
        }
    }

    public static float calculateAverageWaitingTime(Process[] processes) {
        if (processes.length == 0) return 0;
        float totalWaitingTime = 0;
        for (Process process : processes) {
            totalWaitingTime += process.waitingTime;
        }
        return totalWaitingTime / processes.length;
    }

    public static float calculateAverageTurnaroundTime(Process[] processes) {
        if (processes.length == 0) return 0;
        float totalTurnaroundTime = 0;
        for (Process process : processes) {
            totalTurnaroundTime += process.turnaroundTime;
        }
        return totalTurnaroundTime / processes.length;
    }

    public static void printGanttChart(Process[] processes) {
        System.out.println("\nGantt Chart:");
        System.out.print("|");
        for (Process process : processes) {
            System.out.print(" " + process.name + " |");
        }
        System.out.println("\n0" + 
            Arrays.stream(processes)
                 .mapToInt(p -> p.turnaroundTime)
                 .collect(StringBuilder::new, 
                         (sb, time) -> sb.append(String.format("%" + (time > 9 ? 3 : 2) + "d", time)),
                         StringBuilder::append));
    }

    public static void main(String[] args) {
        Process[] processes = {
                new Process("P1", 6),
                new Process("P2", 8),
                new Process("P3", 7),
                new Process("P4", 3)
        };

        System.out.println("Initial Process Order:");
        for (Process process : processes) {
            System.out.println(process.name + " - Burst Time: " + process.burstTime);
        }

        calculateTimes(processes);

        System.out.println("\nScheduling Results:");
        System.out.println("Process\tBurst Time\tWaiting Time\tTurnaround Time");
        for (Process process : processes) {
            System.out.printf("%s\t\t%d\t\t%d\t\t%d\n",
                    process.name,
                    process.burstTime,
                    process.waitingTime,
                    process.turnaroundTime);
        }

        printGanttChart(processes);

        float avgWaitingTime = calculateAverageWaitingTime(processes);
        float avgTurnaroundTime = calculateAverageTurnaroundTime(processes);
        System.out.printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
        System.out.printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
    }
}