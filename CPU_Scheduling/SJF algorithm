import java.util.Arrays;
import java.util.Comparator;

public class SJF {

    static class Process {
        String name;
        int burstTime;
        int waitingTime;
        int turnaroundTime;

        public Process(String name, int burstTime) {
            this.name = name;
            this.burstTime = burstTime;
            this.waitingTime = 0;
            this.turnaroundTime = 0;
        }
    }

    public static void calculateTimes(Process[] processes) {
        Arrays.sort(processes, Comparator.comparingInt(p -> p.burstTime));

        processes[0].waitingTime = 0;
        processes[0].turnaroundTime = processes[0].burstTime;

        for (int i = 1; i < processes.length; i++) {
            processes[i].waitingTime = processes[i - 1].turnaroundTime;
            processes[i].turnaroundTime = processes[i].waitingTime + processes[i].burstTime;
        }
    }

    public static float calculateAverageWaitingTime(Process[] processes) {
        if (processes.length == 0) return 0; // handle empty array
        float totalWaitingTime = 0;
        for (Process process : processes) {
            totalWaitingTime += process.waitingTime;
        }
        return totalWaitingTime / processes.length;
    }

    public static void main(String[] args) {
        Process[] processes = {
                new Process("P1", 6),
                new Process("P2", 8),
                new Process("P3", 7),
                new Process("P4", 3)
        };

        calculateTimes(processes);

        System.out.println("Process\tBurst Time\tWaiting Time\tTurnaround Time");
        for (Process process : processes) {
            System.out.printf("%s\t\t%d\t\t%d\t\t%d\n",
                    process.name,
                    process.burstTime,
                    process.waitingTime,
                    process.turnaroundTime);
        }

        float averageWaitingTime = calculateAverageWaitingTime(processes);
        System.out.printf("Average Waiting Time: %.2f\n", averageWaitingTime);
    }
}